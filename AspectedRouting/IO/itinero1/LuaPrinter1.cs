using System.Collections.Generic;
using System.Linq;
using AspectedRouting.Language;
using AspectedRouting.Language.Expression;
using AspectedRouting.Tests;

namespace AspectedRouting.IO.itinero1
{
    public partial class LuaPrinter1
    {
        private readonly ProfileMetaData _profile;
        private readonly Context _context;
        private readonly List<AspectTestSuite> _aspectTestSuites;
        private readonly List<BehaviourTestSuite> _profileTests;
        private readonly LuaSkeleton.LuaSkeleton _skeleton;


        private readonly LuaParameterPrinter _parameterPrinter;


        public LuaPrinter1(ProfileMetaData profile, Context context,
            List<AspectTestSuite> aspectTestSuites,
            List<BehaviourTestSuite> profileTests)
        {
            _profile = profile;
            _context = context;
            _aspectTestSuites = aspectTestSuites?.Where(suite => suite != null)
                ?.Select(testSuite => testSuite.WithoutRelationTests())?.ToList();
            _profileTests = profileTests;
            _skeleton = new LuaSkeleton.LuaSkeleton(context, true);
            _parameterPrinter = new LuaParameterPrinter(profile, _skeleton);
        }

        public string ToLua()
        {
            _skeleton.AddDep("spoken_instructions");

            var (membershipFunction, extraKeys) = GenerateMembershipPreprocessor();
            var (profileOverview, behaviourFunctions) = GenerateProfileFunctions();
            var mainFunction = GenerateMainProfileFunction();
            var tests = new LuaTestPrinter(_skeleton, new List<string> { "unitTest", "unitTestProfile" })
                .GenerateFullTestSuite(_profileTests, _aspectTestSuites);


            var keys = _profile.AllExpressions(_context).PossibleTags().Keys
                .Concat(extraKeys)
                .Select(key => "\"" + key + "\"")
                .ToHashSet();

            var header = new List<string>
            {
                $"-- Itinero 1.0-profile, generated by AspectedRouting.",
                $"name = \"{_profile.Name}\"",
                "normalize = false",
                "vehicle_types = {" + string.Join(", ", _profile.VehicleTyps.Select(s => "\"" + s + "\"")) + "}",
                // meta_whitelist is defined in the profile file, these are tags that are included in the generated route, but are not relevant for determining weights
                "meta_whitelist = {\n"
                + string.Join("\n    , ", _profile.Metadata.Select(s => "\"" + s + "\""))
                + " }",
                "profile_whitelist = {\n      " + string.Join("\n    , ", keys) + "\n    }",
                "",
                "",
                "",
                profileOverview,
                "",
                _parameterPrinter.GenerateDefaultParameters(),
                "",
                "function create_set(list)",
                "  local set = {}",
                "    for _, l in ipairs(list) do " +
                "      set[l] = true" +
                "    end",
                "  return set",
                "end"
            };


            // Add the aspect functions to the skeleton
            var usedFunctions = _profile.CalledFunctionsRecursive(_context).Values.SelectMany(v => v).ToHashSet();
            foreach (var functionName in usedFunctions)
            {
                _skeleton.AddFunction(_context.GetAspect(functionName));
            }


            // The dependencies should be generated after all the other functions are generated, to make sure all are added
            var dependencies = _skeleton.GenerateDependencies();
            var functions = _skeleton.GenerateFunctions();

            var allCode = new List<List<string>>
            {
                header,
                behaviourFunctions,
                mainFunction.InList(),
                membershipFunction.InList(),
                "---------------------- ASPECTS ----------------------".InList(),
                functions,
                "---------------------- UTILS ------------------------".InList(),
                dependencies,
                _skeleton.GenerateConstants().ToList(),
                "----------------------- TESTS ------------------------".InList(),
                tests.InList(),
                GenerateLegacyTail().InList()
            };


            return string.Join("\n\n\n", allCode.Select(code => string.Join("\n", code)));
        }


        private (string profilesOverview, List<string> behaviourImplementations) GenerateProfileFunctions()
        {
            // Profiles gets the contents for the 'profiles' field, part of the profile spec
            var profiles = new List<string>();
            var behaviourImplementations = new List<string>();
            foreach (var (behaviourName, behaviourParameters) in _profile.Behaviours)
            {
                var (functionName, implementation) = GenerateBehaviourFunction(behaviourName, behaviourParameters);
                behaviourImplementations.Add(implementation);
                profiles.Add(
                    string.Join(",\n    ",
                        $"    name = \"{behaviourName.AsLuaIdentifier()}\"",
                        "    function_name = \"behaviour_" + functionName + "\"",
                        "    metric = \"custom\""
                    )
                );
            }

            var profilesOverview = "profiles = {\n    {\n" +
                                   string.Join("\n    },\n    {\n    ", profiles) + "\n    }\n}";
            return (profilesOverview, behaviourImplementations);
        }


        private string GenerateLegacyTail()
        {
            return string.Join("\n",
                "",
                "if (itinero == nil) then",
                "    itinero = {}",
                "    itinero.log = print",
                "",
                "    -- Itinero is not defined -> we are running from a lua interpreter -> the tests are intended",
                "    runTests = true",
                "",
                "",
                "else",
                "    print = itinero.log",
                "end",
                "",
                "test_all()",
                "if (not failed_tests and not failed_profile_tests) then",
                "    print(\"Tests OK\")",
                "else",
                "    error(\"Some tests failed\")",
                "end"
            );
        }
    }
}